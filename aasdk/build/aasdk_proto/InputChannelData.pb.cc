// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputChannelData.proto

#include "InputChannelData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_TouchConfigData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TouchConfigData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TouchConfig;
}  // namespace protobuf_TouchConfigData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class InputChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputChannel>
      _instance;
} _InputChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace protobuf_InputChannelData_2eproto {
static void InitDefaultsInputChannel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::data::_InputChannel_default_instance_;
    new (ptr) ::f1x::aasdk::proto::data::InputChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::data::InputChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InputChannel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInputChannel}, {
      &protobuf_TouchConfigData_2eproto::scc_info_TouchConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_InputChannel.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, supported_keycodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, touch_screen_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, touch_pad_config_),
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::f1x::aasdk::proto::data::InputChannel)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::f1x::aasdk::proto::data::_InputChannel_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "InputChannelData.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026InputChannelData.proto\022\024f1x.aasdk.prot"
      "o.data\032\025TouchConfigData.proto\"\247\001\n\014InputC"
      "hannel\022\032\n\022supported_keycodes\030\001 \003(\r\022>\n\023to"
      "uch_screen_config\030\002 \001(\0132!.f1x.aasdk.prot"
      "o.data.TouchConfig\022;\n\020touch_pad_config\030\003"
      " \001(\0132!.f1x.aasdk.proto.data.TouchConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InputChannelData.proto", &protobuf_RegisterTypes);
  ::protobuf_TouchConfigData_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_InputChannelData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

void InputChannel::InitAsDefaultInstance() {
  ::f1x::aasdk::proto::data::_InputChannel_default_instance_._instance.get_mutable()->touch_screen_config_ = const_cast< ::f1x::aasdk::proto::data::TouchConfig*>(
      ::f1x::aasdk::proto::data::TouchConfig::internal_default_instance());
  ::f1x::aasdk::proto::data::_InputChannel_default_instance_._instance.get_mutable()->touch_pad_config_ = const_cast< ::f1x::aasdk::proto::data::TouchConfig*>(
      ::f1x::aasdk::proto::data::TouchConfig::internal_default_instance());
}
void InputChannel::clear_touch_screen_config() {
  if (touch_screen_config_ != NULL) touch_screen_config_->Clear();
  clear_has_touch_screen_config();
}
void InputChannel::clear_touch_pad_config() {
  if (touch_pad_config_ != NULL) touch_pad_config_->Clear();
  clear_has_touch_pad_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputChannel::kSupportedKeycodesFieldNumber;
const int InputChannel::kTouchScreenConfigFieldNumber;
const int InputChannel::kTouchPadConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputChannel::InputChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_InputChannelData_2eproto::scc_info_InputChannel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:f1x.aasdk.proto.data.InputChannel)
}
InputChannel::InputChannel(const InputChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      supported_keycodes_(from.supported_keycodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_touch_screen_config()) {
    touch_screen_config_ = new ::f1x::aasdk::proto::data::TouchConfig(*from.touch_screen_config_);
  } else {
    touch_screen_config_ = NULL;
  }
  if (from.has_touch_pad_config()) {
    touch_pad_config_ = new ::f1x::aasdk::proto::data::TouchConfig(*from.touch_pad_config_);
  } else {
    touch_pad_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.data.InputChannel)
}

void InputChannel::SharedCtor() {
  ::memset(&touch_screen_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touch_pad_config_) -
      reinterpret_cast<char*>(&touch_screen_config_)) + sizeof(touch_pad_config_));
}

InputChannel::~InputChannel() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.data.InputChannel)
  SharedDtor();
}

void InputChannel::SharedDtor() {
  if (this != internal_default_instance()) delete touch_screen_config_;
  if (this != internal_default_instance()) delete touch_pad_config_;
}

void InputChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InputChannel::descriptor() {
  ::protobuf_InputChannelData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_InputChannelData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputChannel& InputChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_InputChannelData_2eproto::scc_info_InputChannel.base);
  return *internal_default_instance();
}


void InputChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.data.InputChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_keycodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(touch_screen_config_ != NULL);
      touch_screen_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(touch_pad_config_ != NULL);
      touch_pad_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InputChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f1x.aasdk.proto.data.InputChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 supported_keycodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_supported_keycodes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_supported_keycodes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_touch_screen_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_touch_pad_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f1x.aasdk.proto.data.InputChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f1x.aasdk.proto.data.InputChannel)
  return false;
#undef DO_
}

void InputChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f1x.aasdk.proto.data.InputChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 supported_keycodes = 1;
  for (int i = 0, n = this->supported_keycodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->supported_keycodes(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_touch_screen_config(), output);
  }

  // optional .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_touch_pad_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f1x.aasdk.proto.data.InputChannel)
}

::google::protobuf::uint8* InputChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.data.InputChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 supported_keycodes = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->supported_keycodes_, target);

  cached_has_bits = _has_bits_[0];
  // optional .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_touch_screen_config(), deterministic, target);
  }

  // optional .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_touch_pad_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.data.InputChannel)
  return target;
}

size_t InputChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.data.InputChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 supported_keycodes = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->supported_keycodes_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->supported_keycodes_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
    if (has_touch_screen_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *touch_screen_config_);
    }

    // optional .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
    if (has_touch_pad_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *touch_pad_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.data.InputChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const InputChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.data.InputChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.data.InputChannel)
    MergeFrom(*source);
  }
}

void InputChannel::MergeFrom(const InputChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.data.InputChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_keycodes_.MergeFrom(from.supported_keycodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_touch_screen_config()->::f1x::aasdk::proto::data::TouchConfig::MergeFrom(from.touch_screen_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_touch_pad_config()->::f1x::aasdk::proto::data::TouchConfig::MergeFrom(from.touch_pad_config());
    }
  }
}

void InputChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.data.InputChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputChannel::CopyFrom(const InputChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.data.InputChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputChannel::IsInitialized() const {
  if (has_touch_screen_config()) {
    if (!this->touch_screen_config_->IsInitialized()) return false;
  }
  if (has_touch_pad_config()) {
    if (!this->touch_pad_config_->IsInitialized()) return false;
  }
  return true;
}

void InputChannel::Swap(InputChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputChannel::InternalSwap(InputChannel* other) {
  using std::swap;
  supported_keycodes_.InternalSwap(&other->supported_keycodes_);
  swap(touch_screen_config_, other->touch_screen_config_);
  swap(touch_pad_config_, other->touch_pad_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InputChannel::GetMetadata() const {
  protobuf_InputChannelData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_InputChannelData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::f1x::aasdk::proto::data::InputChannel* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::data::InputChannel >(Arena* arena) {
  return Arena::CreateInternal< ::f1x::aasdk::proto::data::InputChannel >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
