// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDiscoveryRequestMessage.proto

#ifndef PROTOBUF_INCLUDED_ServiceDiscoveryRequestMessage_2eproto
#define PROTOBUF_INCLUDED_ServiceDiscoveryRequestMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ServiceDiscoveryRequestMessage_2eproto 

namespace protobuf_ServiceDiscoveryRequestMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ServiceDiscoveryRequestMessage_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {
class ServiceDiscoveryRequest;
class ServiceDiscoveryRequestDefaultTypeInternal;
extern ServiceDiscoveryRequestDefaultTypeInternal _ServiceDiscoveryRequest_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> ::f1x::aasdk::proto::messages::ServiceDiscoveryRequest* Arena::CreateMaybeMessage<::f1x::aasdk::proto::messages::ServiceDiscoveryRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class ServiceDiscoveryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.messages.ServiceDiscoveryRequest) */ {
 public:
  ServiceDiscoveryRequest();
  virtual ~ServiceDiscoveryRequest();

  ServiceDiscoveryRequest(const ServiceDiscoveryRequest& from);

  inline ServiceDiscoveryRequest& operator=(const ServiceDiscoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceDiscoveryRequest(ServiceDiscoveryRequest&& from) noexcept
    : ServiceDiscoveryRequest() {
    *this = ::std::move(from);
  }

  inline ServiceDiscoveryRequest& operator=(ServiceDiscoveryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceDiscoveryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceDiscoveryRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceDiscoveryRequest*>(
               &_ServiceDiscoveryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServiceDiscoveryRequest* other);
  friend void swap(ServiceDiscoveryRequest& a, ServiceDiscoveryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceDiscoveryRequest* New() const final {
    return CreateMaybeMessage<ServiceDiscoveryRequest>(NULL);
  }

  ServiceDiscoveryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceDiscoveryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceDiscoveryRequest& from);
  void MergeFrom(const ServiceDiscoveryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDiscoveryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_name = 4;
  bool has_device_name() const;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 4;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // required string device_brand = 5;
  bool has_device_brand() const;
  void clear_device_brand();
  static const int kDeviceBrandFieldNumber = 5;
  const ::std::string& device_brand() const;
  void set_device_brand(const ::std::string& value);
  #if LANG_CXX11
  void set_device_brand(::std::string&& value);
  #endif
  void set_device_brand(const char* value);
  void set_device_brand(const char* value, size_t size);
  ::std::string* mutable_device_brand();
  ::std::string* release_device_brand();
  void set_allocated_device_brand(::std::string* device_brand);

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.messages.ServiceDiscoveryRequest)
 private:
  void set_has_device_name();
  void clear_has_device_name();
  void set_has_device_brand();
  void clear_has_device_brand();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::google::protobuf::internal::ArenaStringPtr device_brand_;
  friend struct ::protobuf_ServiceDiscoveryRequestMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceDiscoveryRequest

// required string device_name = 4;
inline bool ServiceDiscoveryRequest::has_device_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceDiscoveryRequest::set_has_device_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceDiscoveryRequest::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceDiscoveryRequest::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
inline const ::std::string& ServiceDiscoveryRequest::device_name() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
  return device_name_.GetNoArena();
}
inline void ServiceDiscoveryRequest::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
}
#if LANG_CXX11
inline void ServiceDiscoveryRequest::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
}
#endif
inline void ServiceDiscoveryRequest::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
}
inline void ServiceDiscoveryRequest::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
}
inline ::std::string* ServiceDiscoveryRequest::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceDiscoveryRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
  if (!has_device_name()) {
    return NULL;
  }
  clear_has_device_name();
  return device_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceDiscoveryRequest::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
}

// required string device_brand = 5;
inline bool ServiceDiscoveryRequest::has_device_brand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceDiscoveryRequest::set_has_device_brand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceDiscoveryRequest::clear_has_device_brand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceDiscoveryRequest::clear_device_brand() {
  device_brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_brand();
}
inline const ::std::string& ServiceDiscoveryRequest::device_brand() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
  return device_brand_.GetNoArena();
}
inline void ServiceDiscoveryRequest::set_device_brand(const ::std::string& value) {
  set_has_device_brand();
  device_brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
}
#if LANG_CXX11
inline void ServiceDiscoveryRequest::set_device_brand(::std::string&& value) {
  set_has_device_brand();
  device_brand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
}
#endif
inline void ServiceDiscoveryRequest::set_device_brand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_brand();
  device_brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
}
inline void ServiceDiscoveryRequest::set_device_brand(const char* value, size_t size) {
  set_has_device_brand();
  device_brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
}
inline ::std::string* ServiceDiscoveryRequest::mutable_device_brand() {
  set_has_device_brand();
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
  return device_brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceDiscoveryRequest::release_device_brand() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
  if (!has_device_brand()) {
    return NULL;
  }
  clear_has_device_brand();
  return device_brand_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceDiscoveryRequest::set_allocated_device_brand(::std::string* device_brand) {
  if (device_brand != NULL) {
    set_has_device_brand();
  } else {
    clear_has_device_brand();
  }
  device_brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_brand);
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ServiceDiscoveryRequestMessage_2eproto
