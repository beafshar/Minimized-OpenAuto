// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TouchActionEnum.proto

#ifndef PROTOBUF_INCLUDED_TouchActionEnum_2eproto
#define PROTOBUF_INCLUDED_TouchActionEnum_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_TouchActionEnum_2eproto 

namespace protobuf_TouchActionEnum_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_TouchActionEnum_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {
class TouchAction;
class TouchActionDefaultTypeInternal;
extern TouchActionDefaultTypeInternal _TouchAction_default_instance_;
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> ::f1x::aasdk::proto::enums::TouchAction* Arena::CreateMaybeMessage<::f1x::aasdk::proto::enums::TouchAction>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {

enum TouchAction_Enum {
  TouchAction_Enum_PRESS = 0,
  TouchAction_Enum_RELEASE = 1,
  TouchAction_Enum_DRAG = 2,
  TouchAction_Enum_POINTER_DOWN = 5,
  TouchAction_Enum_POINTER_UP = 6
};
bool TouchAction_Enum_IsValid(int value);
const TouchAction_Enum TouchAction_Enum_Enum_MIN = TouchAction_Enum_PRESS;
const TouchAction_Enum TouchAction_Enum_Enum_MAX = TouchAction_Enum_POINTER_UP;
const int TouchAction_Enum_Enum_ARRAYSIZE = TouchAction_Enum_Enum_MAX + 1;

const ::google::protobuf::EnumDescriptor* TouchAction_Enum_descriptor();
inline const ::std::string& TouchAction_Enum_Name(TouchAction_Enum value) {
  return ::google::protobuf::internal::NameOfEnum(
    TouchAction_Enum_descriptor(), value);
}
inline bool TouchAction_Enum_Parse(
    const ::std::string& name, TouchAction_Enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TouchAction_Enum>(
    TouchAction_Enum_descriptor(), name, value);
}
// ===================================================================

class TouchAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.enums.TouchAction) */ {
 public:
  TouchAction();
  virtual ~TouchAction();

  TouchAction(const TouchAction& from);

  inline TouchAction& operator=(const TouchAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TouchAction(TouchAction&& from) noexcept
    : TouchAction() {
    *this = ::std::move(from);
  }

  inline TouchAction& operator=(TouchAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TouchAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TouchAction* internal_default_instance() {
    return reinterpret_cast<const TouchAction*>(
               &_TouchAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TouchAction* other);
  friend void swap(TouchAction& a, TouchAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TouchAction* New() const final {
    return CreateMaybeMessage<TouchAction>(NULL);
  }

  TouchAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TouchAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TouchAction& from);
  void MergeFrom(const TouchAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TouchAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TouchAction_Enum Enum;
  static const Enum PRESS =
    TouchAction_Enum_PRESS;
  static const Enum RELEASE =
    TouchAction_Enum_RELEASE;
  static const Enum DRAG =
    TouchAction_Enum_DRAG;
  static const Enum POINTER_DOWN =
    TouchAction_Enum_POINTER_DOWN;
  static const Enum POINTER_UP =
    TouchAction_Enum_POINTER_UP;
  static inline bool Enum_IsValid(int value) {
    return TouchAction_Enum_IsValid(value);
  }
  static const Enum Enum_MIN =
    TouchAction_Enum_Enum_MIN;
  static const Enum Enum_MAX =
    TouchAction_Enum_Enum_MAX;
  static const int Enum_ARRAYSIZE =
    TouchAction_Enum_Enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Enum_descriptor() {
    return TouchAction_Enum_descriptor();
  }
  static inline const ::std::string& Enum_Name(Enum value) {
    return TouchAction_Enum_Name(value);
  }
  static inline bool Enum_Parse(const ::std::string& name,
      Enum* value) {
    return TouchAction_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.enums.TouchAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TouchActionEnum_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TouchAction

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::f1x::aasdk::proto::enums::TouchAction_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::f1x::aasdk::proto::enums::TouchAction_Enum>() {
  return ::f1x::aasdk::proto::enums::TouchAction_Enum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_TouchActionEnum_2eproto
