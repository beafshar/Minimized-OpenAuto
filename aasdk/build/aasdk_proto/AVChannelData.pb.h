// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AVChannelData.proto

#ifndef PROTOBUF_INCLUDED_AVChannelData_2eproto
#define PROTOBUF_INCLUDED_AVChannelData_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "AVStreamTypeEnum.pb.h"
#include "AudioTypeEnum.pb.h"
#include "AudioConfigData.pb.h"
#include "VideoConfigData.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_AVChannelData_2eproto 

namespace protobuf_AVChannelData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_AVChannelData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class AVChannel;
class AVChannelDefaultTypeInternal;
extern AVChannelDefaultTypeInternal _AVChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> ::f1x::aasdk::proto::data::AVChannel* Arena::CreateMaybeMessage<::f1x::aasdk::proto::data::AVChannel>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class AVChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.data.AVChannel) */ {
 public:
  AVChannel();
  virtual ~AVChannel();

  AVChannel(const AVChannel& from);

  inline AVChannel& operator=(const AVChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AVChannel(AVChannel&& from) noexcept
    : AVChannel() {
    *this = ::std::move(from);
  }

  inline AVChannel& operator=(AVChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AVChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AVChannel* internal_default_instance() {
    return reinterpret_cast<const AVChannel*>(
               &_AVChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AVChannel* other);
  friend void swap(AVChannel& a, AVChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AVChannel* New() const final {
    return CreateMaybeMessage<AVChannel>(NULL);
  }

  AVChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AVChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AVChannel& from);
  void MergeFrom(const AVChannel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AVChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .f1x.aasdk.proto.data.AudioConfig audio_configs = 3;
  int audio_configs_size() const;
  void clear_audio_configs();
  static const int kAudioConfigsFieldNumber = 3;
  ::f1x::aasdk::proto::data::AudioConfig* mutable_audio_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::AudioConfig >*
      mutable_audio_configs();
  const ::f1x::aasdk::proto::data::AudioConfig& audio_configs(int index) const;
  ::f1x::aasdk::proto::data::AudioConfig* add_audio_configs();
  const ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::AudioConfig >&
      audio_configs() const;

  // repeated .f1x.aasdk.proto.data.VideoConfig video_configs = 4;
  int video_configs_size() const;
  void clear_video_configs();
  static const int kVideoConfigsFieldNumber = 4;
  ::f1x::aasdk::proto::data::VideoConfig* mutable_video_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::VideoConfig >*
      mutable_video_configs();
  const ::f1x::aasdk::proto::data::VideoConfig& video_configs(int index) const;
  ::f1x::aasdk::proto::data::VideoConfig* add_video_configs();
  const ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::VideoConfig >&
      video_configs() const;

  // required .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
  bool has_stream_type() const;
  void clear_stream_type();
  static const int kStreamTypeFieldNumber = 1;
  ::f1x::aasdk::proto::enums::AVStreamType_Enum stream_type() const;
  void set_stream_type(::f1x::aasdk::proto::enums::AVStreamType_Enum value);

  // optional .f1x.aasdk.proto.enums.AudioType.Enum audio_type = 2;
  bool has_audio_type() const;
  void clear_audio_type();
  static const int kAudioTypeFieldNumber = 2;
  ::f1x::aasdk::proto::enums::AudioType_Enum audio_type() const;
  void set_audio_type(::f1x::aasdk::proto::enums::AudioType_Enum value);

  // optional bool available_while_in_call = 5;
  bool has_available_while_in_call() const;
  void clear_available_while_in_call();
  static const int kAvailableWhileInCallFieldNumber = 5;
  bool available_while_in_call() const;
  void set_available_while_in_call(bool value);

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.data.AVChannel)
 private:
  void set_has_stream_type();
  void clear_has_stream_type();
  void set_has_audio_type();
  void clear_has_audio_type();
  void set_has_available_while_in_call();
  void clear_has_available_while_in_call();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::AudioConfig > audio_configs_;
  ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::VideoConfig > video_configs_;
  int stream_type_;
  int audio_type_;
  bool available_while_in_call_;
  friend struct ::protobuf_AVChannelData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AVChannel

// required .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
inline bool AVChannel::has_stream_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AVChannel::set_has_stream_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AVChannel::clear_has_stream_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AVChannel::clear_stream_type() {
  stream_type_ = 0;
  clear_has_stream_type();
}
inline ::f1x::aasdk::proto::enums::AVStreamType_Enum AVChannel::stream_type() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.AVChannel.stream_type)
  return static_cast< ::f1x::aasdk::proto::enums::AVStreamType_Enum >(stream_type_);
}
inline void AVChannel::set_stream_type(::f1x::aasdk::proto::enums::AVStreamType_Enum value) {
  assert(::f1x::aasdk::proto::enums::AVStreamType_Enum_IsValid(value));
  set_has_stream_type();
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.AVChannel.stream_type)
}

// optional .f1x.aasdk.proto.enums.AudioType.Enum audio_type = 2;
inline bool AVChannel::has_audio_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AVChannel::set_has_audio_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AVChannel::clear_has_audio_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AVChannel::clear_audio_type() {
  audio_type_ = 0;
  clear_has_audio_type();
}
inline ::f1x::aasdk::proto::enums::AudioType_Enum AVChannel::audio_type() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.AVChannel.audio_type)
  return static_cast< ::f1x::aasdk::proto::enums::AudioType_Enum >(audio_type_);
}
inline void AVChannel::set_audio_type(::f1x::aasdk::proto::enums::AudioType_Enum value) {
  assert(::f1x::aasdk::proto::enums::AudioType_Enum_IsValid(value));
  set_has_audio_type();
  audio_type_ = value;
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.AVChannel.audio_type)
}

// repeated .f1x.aasdk.proto.data.AudioConfig audio_configs = 3;
inline int AVChannel::audio_configs_size() const {
  return audio_configs_.size();
}
inline ::f1x::aasdk::proto::data::AudioConfig* AVChannel::mutable_audio_configs(int index) {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.AVChannel.audio_configs)
  return audio_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::AudioConfig >*
AVChannel::mutable_audio_configs() {
  // @@protoc_insertion_point(field_mutable_list:f1x.aasdk.proto.data.AVChannel.audio_configs)
  return &audio_configs_;
}
inline const ::f1x::aasdk::proto::data::AudioConfig& AVChannel::audio_configs(int index) const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.AVChannel.audio_configs)
  return audio_configs_.Get(index);
}
inline ::f1x::aasdk::proto::data::AudioConfig* AVChannel::add_audio_configs() {
  // @@protoc_insertion_point(field_add:f1x.aasdk.proto.data.AVChannel.audio_configs)
  return audio_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::AudioConfig >&
AVChannel::audio_configs() const {
  // @@protoc_insertion_point(field_list:f1x.aasdk.proto.data.AVChannel.audio_configs)
  return audio_configs_;
}

// repeated .f1x.aasdk.proto.data.VideoConfig video_configs = 4;
inline int AVChannel::video_configs_size() const {
  return video_configs_.size();
}
inline ::f1x::aasdk::proto::data::VideoConfig* AVChannel::mutable_video_configs(int index) {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.AVChannel.video_configs)
  return video_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::VideoConfig >*
AVChannel::mutable_video_configs() {
  // @@protoc_insertion_point(field_mutable_list:f1x.aasdk.proto.data.AVChannel.video_configs)
  return &video_configs_;
}
inline const ::f1x::aasdk::proto::data::VideoConfig& AVChannel::video_configs(int index) const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.AVChannel.video_configs)
  return video_configs_.Get(index);
}
inline ::f1x::aasdk::proto::data::VideoConfig* AVChannel::add_video_configs() {
  // @@protoc_insertion_point(field_add:f1x.aasdk.proto.data.AVChannel.video_configs)
  return video_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::f1x::aasdk::proto::data::VideoConfig >&
AVChannel::video_configs() const {
  // @@protoc_insertion_point(field_list:f1x.aasdk.proto.data.AVChannel.video_configs)
  return video_configs_;
}

// optional bool available_while_in_call = 5;
inline bool AVChannel::has_available_while_in_call() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AVChannel::set_has_available_while_in_call() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AVChannel::clear_has_available_while_in_call() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AVChannel::clear_available_while_in_call() {
  available_while_in_call_ = false;
  clear_has_available_while_in_call();
}
inline bool AVChannel::available_while_in_call() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.AVChannel.available_while_in_call)
  return available_while_in_call_;
}
inline void AVChannel::set_available_while_in_call(bool value) {
  set_has_available_while_in_call();
  available_while_in_call_ = value;
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.AVChannel.available_while_in_call)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_AVChannelData_2eproto
