// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputChannelData.proto

#ifndef PROTOBUF_INCLUDED_InputChannelData_2eproto
#define PROTOBUF_INCLUDED_InputChannelData_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TouchConfigData.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_InputChannelData_2eproto 

namespace protobuf_InputChannelData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_InputChannelData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class InputChannel;
class InputChannelDefaultTypeInternal;
extern InputChannelDefaultTypeInternal _InputChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> ::f1x::aasdk::proto::data::InputChannel* Arena::CreateMaybeMessage<::f1x::aasdk::proto::data::InputChannel>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class InputChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.data.InputChannel) */ {
 public:
  InputChannel();
  virtual ~InputChannel();

  InputChannel(const InputChannel& from);

  inline InputChannel& operator=(const InputChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputChannel(InputChannel&& from) noexcept
    : InputChannel() {
    *this = ::std::move(from);
  }

  inline InputChannel& operator=(InputChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputChannel* internal_default_instance() {
    return reinterpret_cast<const InputChannel*>(
               &_InputChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InputChannel* other);
  friend void swap(InputChannel& a, InputChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputChannel* New() const final {
    return CreateMaybeMessage<InputChannel>(NULL);
  }

  InputChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InputChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InputChannel& from);
  void MergeFrom(const InputChannel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 supported_keycodes = 1;
  int supported_keycodes_size() const;
  void clear_supported_keycodes();
  static const int kSupportedKeycodesFieldNumber = 1;
  ::google::protobuf::uint32 supported_keycodes(int index) const;
  void set_supported_keycodes(int index, ::google::protobuf::uint32 value);
  void add_supported_keycodes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      supported_keycodes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_supported_keycodes();

  // optional .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
  bool has_touch_screen_config() const;
  void clear_touch_screen_config();
  static const int kTouchScreenConfigFieldNumber = 2;
  private:
  const ::f1x::aasdk::proto::data::TouchConfig& _internal_touch_screen_config() const;
  public:
  const ::f1x::aasdk::proto::data::TouchConfig& touch_screen_config() const;
  ::f1x::aasdk::proto::data::TouchConfig* release_touch_screen_config();
  ::f1x::aasdk::proto::data::TouchConfig* mutable_touch_screen_config();
  void set_allocated_touch_screen_config(::f1x::aasdk::proto::data::TouchConfig* touch_screen_config);

  // optional .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
  bool has_touch_pad_config() const;
  void clear_touch_pad_config();
  static const int kTouchPadConfigFieldNumber = 3;
  private:
  const ::f1x::aasdk::proto::data::TouchConfig& _internal_touch_pad_config() const;
  public:
  const ::f1x::aasdk::proto::data::TouchConfig& touch_pad_config() const;
  ::f1x::aasdk::proto::data::TouchConfig* release_touch_pad_config();
  ::f1x::aasdk::proto::data::TouchConfig* mutable_touch_pad_config();
  void set_allocated_touch_pad_config(::f1x::aasdk::proto::data::TouchConfig* touch_pad_config);

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.data.InputChannel)
 private:
  void set_has_touch_screen_config();
  void clear_has_touch_screen_config();
  void set_has_touch_pad_config();
  void clear_has_touch_pad_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > supported_keycodes_;
  ::f1x::aasdk::proto::data::TouchConfig* touch_screen_config_;
  ::f1x::aasdk::proto::data::TouchConfig* touch_pad_config_;
  friend struct ::protobuf_InputChannelData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputChannel

// repeated uint32 supported_keycodes = 1;
inline int InputChannel::supported_keycodes_size() const {
  return supported_keycodes_.size();
}
inline void InputChannel::clear_supported_keycodes() {
  supported_keycodes_.Clear();
}
inline ::google::protobuf::uint32 InputChannel::supported_keycodes(int index) const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.InputChannel.supported_keycodes)
  return supported_keycodes_.Get(index);
}
inline void InputChannel::set_supported_keycodes(int index, ::google::protobuf::uint32 value) {
  supported_keycodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.InputChannel.supported_keycodes)
}
inline void InputChannel::add_supported_keycodes(::google::protobuf::uint32 value) {
  supported_keycodes_.Add(value);
  // @@protoc_insertion_point(field_add:f1x.aasdk.proto.data.InputChannel.supported_keycodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InputChannel::supported_keycodes() const {
  // @@protoc_insertion_point(field_list:f1x.aasdk.proto.data.InputChannel.supported_keycodes)
  return supported_keycodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InputChannel::mutable_supported_keycodes() {
  // @@protoc_insertion_point(field_mutable_list:f1x.aasdk.proto.data.InputChannel.supported_keycodes)
  return &supported_keycodes_;
}

// optional .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
inline bool InputChannel::has_touch_screen_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InputChannel::set_has_touch_screen_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InputChannel::clear_has_touch_screen_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::f1x::aasdk::proto::data::TouchConfig& InputChannel::_internal_touch_screen_config() const {
  return *touch_screen_config_;
}
inline const ::f1x::aasdk::proto::data::TouchConfig& InputChannel::touch_screen_config() const {
  const ::f1x::aasdk::proto::data::TouchConfig* p = touch_screen_config_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.InputChannel.touch_screen_config)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::TouchConfig*>(
      &::f1x::aasdk::proto::data::_TouchConfig_default_instance_);
}
inline ::f1x::aasdk::proto::data::TouchConfig* InputChannel::release_touch_screen_config() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.InputChannel.touch_screen_config)
  clear_has_touch_screen_config();
  ::f1x::aasdk::proto::data::TouchConfig* temp = touch_screen_config_;
  touch_screen_config_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::TouchConfig* InputChannel::mutable_touch_screen_config() {
  set_has_touch_screen_config();
  if (touch_screen_config_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::TouchConfig>(GetArenaNoVirtual());
    touch_screen_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.InputChannel.touch_screen_config)
  return touch_screen_config_;
}
inline void InputChannel::set_allocated_touch_screen_config(::f1x::aasdk::proto::data::TouchConfig* touch_screen_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(touch_screen_config_);
  }
  if (touch_screen_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      touch_screen_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, touch_screen_config, submessage_arena);
    }
    set_has_touch_screen_config();
  } else {
    clear_has_touch_screen_config();
  }
  touch_screen_config_ = touch_screen_config;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.InputChannel.touch_screen_config)
}

// optional .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
inline bool InputChannel::has_touch_pad_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InputChannel::set_has_touch_pad_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InputChannel::clear_has_touch_pad_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::f1x::aasdk::proto::data::TouchConfig& InputChannel::_internal_touch_pad_config() const {
  return *touch_pad_config_;
}
inline const ::f1x::aasdk::proto::data::TouchConfig& InputChannel::touch_pad_config() const {
  const ::f1x::aasdk::proto::data::TouchConfig* p = touch_pad_config_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.InputChannel.touch_pad_config)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::TouchConfig*>(
      &::f1x::aasdk::proto::data::_TouchConfig_default_instance_);
}
inline ::f1x::aasdk::proto::data::TouchConfig* InputChannel::release_touch_pad_config() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.InputChannel.touch_pad_config)
  clear_has_touch_pad_config();
  ::f1x::aasdk::proto::data::TouchConfig* temp = touch_pad_config_;
  touch_pad_config_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::TouchConfig* InputChannel::mutable_touch_pad_config() {
  set_has_touch_pad_config();
  if (touch_pad_config_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::TouchConfig>(GetArenaNoVirtual());
    touch_pad_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.InputChannel.touch_pad_config)
  return touch_pad_config_;
}
inline void InputChannel::set_allocated_touch_pad_config(::f1x::aasdk::proto::data::TouchConfig* touch_pad_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(touch_pad_config_);
  }
  if (touch_pad_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      touch_pad_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, touch_pad_config, submessage_arena);
    }
    set_has_touch_pad_config();
  } else {
    clear_has_touch_pad_config();
  }
  touch_pad_config_ = touch_pad_config;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.InputChannel.touch_pad_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_InputChannelData_2eproto
