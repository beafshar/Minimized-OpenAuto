// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorChannelMessageIdsEnum.proto

#include "SensorChannelMessageIdsEnum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace f1x {
namespace aasdk {
namespace proto {
namespace ids {
class SensorChannelMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorChannelMessage>
      _instance;
} _SensorChannelMessage_default_instance_;
}  // namespace ids
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace protobuf_SensorChannelMessageIdsEnum_2eproto {
static void InitDefaultsSensorChannelMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::ids::_SensorChannelMessage_default_instance_;
    new (ptr) ::f1x::aasdk::proto::ids::SensorChannelMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::ids::SensorChannelMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorChannelMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorChannelMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorChannelMessage.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::ids::SensorChannelMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::ids::SensorChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::f1x::aasdk::proto::ids::SensorChannelMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::f1x::aasdk::proto::ids::_SensorChannelMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "SensorChannelMessageIdsEnum.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!SensorChannelMessageIdsEnum.proto\022\023f1x"
      ".aasdk.proto.ids\"\200\001\n\024SensorChannelMessag"
      "e\"h\n\004Enum\022\010\n\004NONE\020\000\022\032\n\024SENSOR_START_REQU"
      "EST\020\201\200\002\022\033\n\025SENSOR_START_RESPONSE\020\202\200\002\022\035\n\027"
      "SENSOR_EVENT_INDICATION\020\203\200\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorChannelMessageIdsEnum.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SensorChannelMessageIdsEnum_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace ids {
const ::google::protobuf::EnumDescriptor* SensorChannelMessage_Enum_descriptor() {
  protobuf_SensorChannelMessageIdsEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SensorChannelMessageIdsEnum_2eproto::file_level_enum_descriptors[0];
}
bool SensorChannelMessage_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 32769:
    case 32770:
    case 32771:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorChannelMessage_Enum SensorChannelMessage::NONE;
const SensorChannelMessage_Enum SensorChannelMessage::SENSOR_START_REQUEST;
const SensorChannelMessage_Enum SensorChannelMessage::SENSOR_START_RESPONSE;
const SensorChannelMessage_Enum SensorChannelMessage::SENSOR_EVENT_INDICATION;
const SensorChannelMessage_Enum SensorChannelMessage::Enum_MIN;
const SensorChannelMessage_Enum SensorChannelMessage::Enum_MAX;
const int SensorChannelMessage::Enum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SensorChannelMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorChannelMessage::SensorChannelMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_SensorChannelMessageIdsEnum_2eproto::scc_info_SensorChannelMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:f1x.aasdk.proto.ids.SensorChannelMessage)
}
SensorChannelMessage::SensorChannelMessage(const SensorChannelMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.ids.SensorChannelMessage)
}

void SensorChannelMessage::SharedCtor() {
}

SensorChannelMessage::~SensorChannelMessage() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.ids.SensorChannelMessage)
  SharedDtor();
}

void SensorChannelMessage::SharedDtor() {
}

void SensorChannelMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorChannelMessage::descriptor() {
  ::protobuf_SensorChannelMessageIdsEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorChannelMessageIdsEnum_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorChannelMessage& SensorChannelMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_SensorChannelMessageIdsEnum_2eproto::scc_info_SensorChannelMessage.base);
  return *internal_default_instance();
}


void SensorChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SensorChannelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:f1x.aasdk.proto.ids.SensorChannelMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f1x.aasdk.proto.ids.SensorChannelMessage)
  return false;
#undef DO_
}

void SensorChannelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f1x.aasdk.proto.ids.SensorChannelMessage)
}

::google::protobuf::uint8* SensorChannelMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.ids.SensorChannelMessage)
  return target;
}

size_t SensorChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorChannelMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorChannelMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorChannelMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.ids.SensorChannelMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.ids.SensorChannelMessage)
    MergeFrom(*source);
  }
}

void SensorChannelMessage::MergeFrom(const SensorChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SensorChannelMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorChannelMessage::CopyFrom(const SensorChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.ids.SensorChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorChannelMessage::IsInitialized() const {
  return true;
}

void SensorChannelMessage::Swap(SensorChannelMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorChannelMessage::InternalSwap(SensorChannelMessage* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorChannelMessage::GetMetadata() const {
  protobuf_SensorChannelMessageIdsEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorChannelMessageIdsEnum_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ids
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::f1x::aasdk::proto::ids::SensorChannelMessage* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::ids::SensorChannelMessage >(Arena* arena) {
  return Arena::CreateInternal< ::f1x::aasdk::proto::ids::SensorChannelMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
