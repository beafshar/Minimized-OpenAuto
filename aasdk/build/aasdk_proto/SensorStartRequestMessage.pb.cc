// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorStartRequestMessage.proto

#include "SensorStartRequestMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {
class SensorStartRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorStartRequestMessage>
      _instance;
} _SensorStartRequestMessage_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace protobuf_SensorStartRequestMessage_2eproto {
static void InitDefaultsSensorStartRequestMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::messages::_SensorStartRequestMessage_default_instance_;
    new (ptr) ::f1x::aasdk::proto::messages::SensorStartRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::messages::SensorStartRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorStartRequestMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorStartRequestMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorStartRequestMessage.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::messages::SensorStartRequestMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::messages::SensorStartRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::messages::SensorStartRequestMessage, sensor_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::messages::SensorStartRequestMessage, refresh_interval_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::f1x::aasdk::proto::messages::SensorStartRequestMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::f1x::aasdk::proto::messages::_SensorStartRequestMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "SensorStartRequestMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037SensorStartRequestMessage.proto\022\030f1x.a"
      "asdk.proto.messages\032\024SensorTypeEnum.prot"
      "o\"r\n\031SensorStartRequestMessage\022;\n\013sensor"
      "_type\030\001 \002(\0162&.f1x.aasdk.proto.enums.Sens"
      "orType.Enum\022\030\n\020refresh_interval\030\002 \002(\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SensorStartRequestMessage.proto", &protobuf_RegisterTypes);
  ::protobuf_SensorTypeEnum_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SensorStartRequestMessage_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

void SensorStartRequestMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorStartRequestMessage::kSensorTypeFieldNumber;
const int SensorStartRequestMessage::kRefreshIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorStartRequestMessage::SensorStartRequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_SensorStartRequestMessage_2eproto::scc_info_SensorStartRequestMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:f1x.aasdk.proto.messages.SensorStartRequestMessage)
}
SensorStartRequestMessage::SensorStartRequestMessage(const SensorStartRequestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&refresh_interval_, &from.refresh_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_type_) -
    reinterpret_cast<char*>(&refresh_interval_)) + sizeof(sensor_type_));
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.messages.SensorStartRequestMessage)
}

void SensorStartRequestMessage::SharedCtor() {
  ::memset(&refresh_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_type_) -
      reinterpret_cast<char*>(&refresh_interval_)) + sizeof(sensor_type_));
}

SensorStartRequestMessage::~SensorStartRequestMessage() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  SharedDtor();
}

void SensorStartRequestMessage::SharedDtor() {
}

void SensorStartRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorStartRequestMessage::descriptor() {
  ::protobuf_SensorStartRequestMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorStartRequestMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorStartRequestMessage& SensorStartRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_SensorStartRequestMessage_2eproto::scc_info_SensorStartRequestMessage.base);
  return *internal_default_instance();
}


void SensorStartRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&refresh_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sensor_type_) -
        reinterpret_cast<char*>(&refresh_interval_)) + sizeof(sensor_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SensorStartRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .f1x.aasdk.proto.enums.SensorType.Enum sensor_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::f1x::aasdk::proto::enums::SensorType_Enum_IsValid(value)) {
            set_sensor_type(static_cast< ::f1x::aasdk::proto::enums::SensorType_Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 refresh_interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_refresh_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refresh_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  return false;
#undef DO_
}

void SensorStartRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .f1x.aasdk.proto.enums.SensorType.Enum sensor_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sensor_type(), output);
  }

  // required int64 refresh_interval = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->refresh_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f1x.aasdk.proto.messages.SensorStartRequestMessage)
}

::google::protobuf::uint8* SensorStartRequestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .f1x.aasdk.proto.enums.SensorType.Enum sensor_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sensor_type(), target);
  }

  // required int64 refresh_interval = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->refresh_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  return target;
}

size_t SensorStartRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  size_t total_size = 0;

  if (has_refresh_interval()) {
    // required int64 refresh_interval = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->refresh_interval());
  }

  if (has_sensor_type()) {
    // required .f1x.aasdk.proto.enums.SensorType.Enum sensor_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sensor_type());
  }

  return total_size;
}
size_t SensorStartRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 refresh_interval = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->refresh_interval());

    // required .f1x.aasdk.proto.enums.SensorType.Enum sensor_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sensor_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorStartRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorStartRequestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorStartRequestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.messages.SensorStartRequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.messages.SensorStartRequestMessage)
    MergeFrom(*source);
  }
}

void SensorStartRequestMessage::MergeFrom(const SensorStartRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      refresh_interval_ = from.refresh_interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_type_ = from.sensor_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorStartRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorStartRequestMessage::CopyFrom(const SensorStartRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.messages.SensorStartRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStartRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SensorStartRequestMessage::Swap(SensorStartRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorStartRequestMessage::InternalSwap(SensorStartRequestMessage* other) {
  using std::swap;
  swap(refresh_interval_, other->refresh_interval_);
  swap(sensor_type_, other->sensor_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorStartRequestMessage::GetMetadata() const {
  protobuf_SensorStartRequestMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SensorStartRequestMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::f1x::aasdk::proto::messages::SensorStartRequestMessage* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::messages::SensorStartRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::f1x::aasdk::proto::messages::SensorStartRequestMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
