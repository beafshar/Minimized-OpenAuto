// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AVChannelData.proto

#include "AVChannelData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_AudioConfigData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AudioConfigData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AudioConfig;
}  // namespace protobuf_AudioConfigData_2eproto
namespace protobuf_VideoConfigData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_VideoConfigData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VideoConfig;
}  // namespace protobuf_VideoConfigData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class AVChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AVChannel>
      _instance;
} _AVChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace protobuf_AVChannelData_2eproto {
static void InitDefaultsAVChannel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::data::_AVChannel_default_instance_;
    new (ptr) ::f1x::aasdk::proto::data::AVChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::data::AVChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AVChannel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAVChannel}, {
      &protobuf_AudioConfigData_2eproto::scc_info_AudioConfig.base,
      &protobuf_VideoConfigData_2eproto::scc_info_VideoConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AVChannel.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::AVChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::AVChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::AVChannel, stream_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::AVChannel, audio_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::AVChannel, audio_configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::AVChannel, video_configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::AVChannel, available_while_in_call_),
  0,
  1,
  ~0u,
  ~0u,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::f1x::aasdk::proto::data::AVChannel)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::f1x::aasdk::proto::data::_AVChannel_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "AVChannelData.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023AVChannelData.proto\022\024f1x.aasdk.proto.d"
      "ata\032\026AVStreamTypeEnum.proto\032\023AudioTypeEn"
      "um.proto\032\025AudioConfigData.proto\032\025VideoCo"
      "nfigData.proto\"\232\002\n\tAVChannel\022=\n\013stream_t"
      "ype\030\001 \002(\0162(.f1x.aasdk.proto.enums.AVStre"
      "amType.Enum\0229\n\naudio_type\030\002 \001(\0162%.f1x.aa"
      "sdk.proto.enums.AudioType.Enum\0228\n\raudio_"
      "configs\030\003 \003(\0132!.f1x.aasdk.proto.data.Aud"
      "ioConfig\0228\n\rvideo_configs\030\004 \003(\0132!.f1x.aa"
      "sdk.proto.data.VideoConfig\022\037\n\027available_"
      "while_in_call\030\005 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AVChannelData.proto", &protobuf_RegisterTypes);
  ::protobuf_AVStreamTypeEnum_2eproto::AddDescriptors();
  ::protobuf_AudioTypeEnum_2eproto::AddDescriptors();
  ::protobuf_AudioConfigData_2eproto::AddDescriptors();
  ::protobuf_VideoConfigData_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_AVChannelData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

void AVChannel::InitAsDefaultInstance() {
}
void AVChannel::clear_audio_configs() {
  audio_configs_.Clear();
}
void AVChannel::clear_video_configs() {
  video_configs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AVChannel::kStreamTypeFieldNumber;
const int AVChannel::kAudioTypeFieldNumber;
const int AVChannel::kAudioConfigsFieldNumber;
const int AVChannel::kVideoConfigsFieldNumber;
const int AVChannel::kAvailableWhileInCallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AVChannel::AVChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AVChannelData_2eproto::scc_info_AVChannel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:f1x.aasdk.proto.data.AVChannel)
}
AVChannel::AVChannel(const AVChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      audio_configs_(from.audio_configs_),
      video_configs_(from.video_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_type_, &from.stream_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_while_in_call_) -
    reinterpret_cast<char*>(&stream_type_)) + sizeof(available_while_in_call_));
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.data.AVChannel)
}

void AVChannel::SharedCtor() {
  ::memset(&stream_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_while_in_call_) -
      reinterpret_cast<char*>(&stream_type_)) + sizeof(available_while_in_call_));
}

AVChannel::~AVChannel() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.data.AVChannel)
  SharedDtor();
}

void AVChannel::SharedDtor() {
}

void AVChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AVChannel::descriptor() {
  ::protobuf_AVChannelData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AVChannelData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AVChannel& AVChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AVChannelData_2eproto::scc_info_AVChannel.base);
  return *internal_default_instance();
}


void AVChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.data.AVChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_configs_.Clear();
  video_configs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&stream_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&available_while_in_call_) -
        reinterpret_cast<char*>(&stream_type_)) + sizeof(available_while_in_call_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AVChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f1x.aasdk.proto.data.AVChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::f1x::aasdk::proto::enums::AVStreamType_Enum_IsValid(value)) {
            set_stream_type(static_cast< ::f1x::aasdk::proto::enums::AVStreamType_Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.enums.AudioType.Enum audio_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::f1x::aasdk::proto::enums::AudioType_Enum_IsValid(value)) {
            set_audio_type(static_cast< ::f1x::aasdk::proto::enums::AudioType_Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .f1x.aasdk.proto.data.AudioConfig audio_configs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_audio_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .f1x.aasdk.proto.data.VideoConfig video_configs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_video_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool available_while_in_call = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_available_while_in_call();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_while_in_call_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f1x.aasdk.proto.data.AVChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f1x.aasdk.proto.data.AVChannel)
  return false;
#undef DO_
}

void AVChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f1x.aasdk.proto.data.AVChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stream_type(), output);
  }

  // optional .f1x.aasdk.proto.enums.AudioType.Enum audio_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->audio_type(), output);
  }

  // repeated .f1x.aasdk.proto.data.AudioConfig audio_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->audio_configs(static_cast<int>(i)),
      output);
  }

  // repeated .f1x.aasdk.proto.data.VideoConfig video_configs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->video_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->video_configs(static_cast<int>(i)),
      output);
  }

  // optional bool available_while_in_call = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->available_while_in_call(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f1x.aasdk.proto.data.AVChannel)
}

::google::protobuf::uint8* AVChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.data.AVChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stream_type(), target);
  }

  // optional .f1x.aasdk.proto.enums.AudioType.Enum audio_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->audio_type(), target);
  }

  // repeated .f1x.aasdk.proto.data.AudioConfig audio_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->audio_configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->audio_configs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .f1x.aasdk.proto.data.VideoConfig video_configs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->video_configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->video_configs(static_cast<int>(i)), deterministic, target);
  }

  // optional bool available_while_in_call = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->available_while_in_call(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.data.AVChannel)
  return target;
}

size_t AVChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.data.AVChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
  if (has_stream_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_type());
  }
  // repeated .f1x.aasdk.proto.data.AudioConfig audio_configs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->audio_configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->audio_configs(static_cast<int>(i)));
    }
  }

  // repeated .f1x.aasdk.proto.data.VideoConfig video_configs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->video_configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->video_configs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional .f1x.aasdk.proto.enums.AudioType.Enum audio_type = 2;
    if (has_audio_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_type());
    }

    // optional bool available_while_in_call = 5;
    if (has_available_while_in_call()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AVChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.data.AVChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const AVChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AVChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.data.AVChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.data.AVChannel)
    MergeFrom(*source);
  }
}

void AVChannel::MergeFrom(const AVChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.data.AVChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  audio_configs_.MergeFrom(from.audio_configs_);
  video_configs_.MergeFrom(from.video_configs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      stream_type_ = from.stream_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      audio_type_ = from.audio_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      available_while_in_call_ = from.available_while_in_call_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AVChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.data.AVChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVChannel::CopyFrom(const AVChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.data.AVChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVChannel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->audio_configs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->video_configs())) return false;
  return true;
}

void AVChannel::Swap(AVChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AVChannel::InternalSwap(AVChannel* other) {
  using std::swap;
  CastToBase(&audio_configs_)->InternalSwap(CastToBase(&other->audio_configs_));
  CastToBase(&video_configs_)->InternalSwap(CastToBase(&other->video_configs_));
  swap(stream_type_, other->stream_type_);
  swap(audio_type_, other->audio_type_);
  swap(available_while_in_call_, other->available_while_in_call_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AVChannel::GetMetadata() const {
  protobuf_AVChannelData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AVChannelData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::f1x::aasdk::proto::data::AVChannel* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::data::AVChannel >(Arena* arena) {
  return Arena::CreateInternal< ::f1x::aasdk::proto::data::AVChannel >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
