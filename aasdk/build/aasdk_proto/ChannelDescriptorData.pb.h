// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChannelDescriptorData.proto

#ifndef PROTOBUF_INCLUDED_ChannelDescriptorData_2eproto
#define PROTOBUF_INCLUDED_ChannelDescriptorData_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SensorChannelData.pb.h"
#include "AVChannelData.pb.h"
#include "InputChannelData.pb.h"
#include "AVInputChannelData.pb.h"
#include "NavigationChannelData.pb.h"
#include "VendorExtensionChannelData.pb.h"
#include "MediaChannelData.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ChannelDescriptorData_2eproto 

namespace protobuf_ChannelDescriptorData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ChannelDescriptorData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class ChannelDescriptor;
class ChannelDescriptorDefaultTypeInternal;
extern ChannelDescriptorDefaultTypeInternal _ChannelDescriptor_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> ::f1x::aasdk::proto::data::ChannelDescriptor* Arena::CreateMaybeMessage<::f1x::aasdk::proto::data::ChannelDescriptor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class ChannelDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.data.ChannelDescriptor) */ {
 public:
  ChannelDescriptor();
  virtual ~ChannelDescriptor();

  ChannelDescriptor(const ChannelDescriptor& from);

  inline ChannelDescriptor& operator=(const ChannelDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelDescriptor(ChannelDescriptor&& from) noexcept
    : ChannelDescriptor() {
    *this = ::std::move(from);
  }

  inline ChannelDescriptor& operator=(ChannelDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelDescriptor* internal_default_instance() {
    return reinterpret_cast<const ChannelDescriptor*>(
               &_ChannelDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ChannelDescriptor* other);
  friend void swap(ChannelDescriptor& a, ChannelDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelDescriptor* New() const final {
    return CreateMaybeMessage<ChannelDescriptor>(NULL);
  }

  ChannelDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelDescriptor& from);
  void MergeFrom(const ChannelDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .f1x.aasdk.proto.data.SensorChannel sensor_channel = 2;
  bool has_sensor_channel() const;
  void clear_sensor_channel();
  static const int kSensorChannelFieldNumber = 2;
  private:
  const ::f1x::aasdk::proto::data::SensorChannel& _internal_sensor_channel() const;
  public:
  const ::f1x::aasdk::proto::data::SensorChannel& sensor_channel() const;
  ::f1x::aasdk::proto::data::SensorChannel* release_sensor_channel();
  ::f1x::aasdk::proto::data::SensorChannel* mutable_sensor_channel();
  void set_allocated_sensor_channel(::f1x::aasdk::proto::data::SensorChannel* sensor_channel);

  // optional .f1x.aasdk.proto.data.AVChannel av_channel = 3;
  bool has_av_channel() const;
  void clear_av_channel();
  static const int kAvChannelFieldNumber = 3;
  private:
  const ::f1x::aasdk::proto::data::AVChannel& _internal_av_channel() const;
  public:
  const ::f1x::aasdk::proto::data::AVChannel& av_channel() const;
  ::f1x::aasdk::proto::data::AVChannel* release_av_channel();
  ::f1x::aasdk::proto::data::AVChannel* mutable_av_channel();
  void set_allocated_av_channel(::f1x::aasdk::proto::data::AVChannel* av_channel);

  // optional .f1x.aasdk.proto.data.InputChannel input_channel = 4;
  bool has_input_channel() const;
  void clear_input_channel();
  static const int kInputChannelFieldNumber = 4;
  private:
  const ::f1x::aasdk::proto::data::InputChannel& _internal_input_channel() const;
  public:
  const ::f1x::aasdk::proto::data::InputChannel& input_channel() const;
  ::f1x::aasdk::proto::data::InputChannel* release_input_channel();
  ::f1x::aasdk::proto::data::InputChannel* mutable_input_channel();
  void set_allocated_input_channel(::f1x::aasdk::proto::data::InputChannel* input_channel);

  // optional .f1x.aasdk.proto.data.AVInputChannel av_input_channel = 5;
  bool has_av_input_channel() const;
  void clear_av_input_channel();
  static const int kAvInputChannelFieldNumber = 5;
  private:
  const ::f1x::aasdk::proto::data::AVInputChannel& _internal_av_input_channel() const;
  public:
  const ::f1x::aasdk::proto::data::AVInputChannel& av_input_channel() const;
  ::f1x::aasdk::proto::data::AVInputChannel* release_av_input_channel();
  ::f1x::aasdk::proto::data::AVInputChannel* mutable_av_input_channel();
  void set_allocated_av_input_channel(::f1x::aasdk::proto::data::AVInputChannel* av_input_channel);

  // optional .f1x.aasdk.proto.data.NavigationChannel navigation_channel = 8;
  bool has_navigation_channel() const;
  void clear_navigation_channel();
  static const int kNavigationChannelFieldNumber = 8;
  private:
  const ::f1x::aasdk::proto::data::NavigationChannel& _internal_navigation_channel() const;
  public:
  const ::f1x::aasdk::proto::data::NavigationChannel& navigation_channel() const;
  ::f1x::aasdk::proto::data::NavigationChannel* release_navigation_channel();
  ::f1x::aasdk::proto::data::NavigationChannel* mutable_navigation_channel();
  void set_allocated_navigation_channel(::f1x::aasdk::proto::data::NavigationChannel* navigation_channel);

  // optional .f1x.aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
  bool has_media_infochannel() const;
  void clear_media_infochannel();
  static const int kMediaInfoChannelFieldNumber = 9;
  private:
  const ::f1x::aasdk::proto::data::MediaInfoChannel& _internal_media_infochannel() const;
  public:
  const ::f1x::aasdk::proto::data::MediaInfoChannel& media_infochannel() const;
  ::f1x::aasdk::proto::data::MediaInfoChannel* release_media_infochannel();
  ::f1x::aasdk::proto::data::MediaInfoChannel* mutable_media_infochannel();
  void set_allocated_media_infochannel(::f1x::aasdk::proto::data::MediaInfoChannel* media_infochannel);

  // optional .f1x.aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
  bool has_vendor_extension_channel() const;
  void clear_vendor_extension_channel();
  static const int kVendorExtensionChannelFieldNumber = 12;
  private:
  const ::f1x::aasdk::proto::data::VendorExtensionChannel& _internal_vendor_extension_channel() const;
  public:
  const ::f1x::aasdk::proto::data::VendorExtensionChannel& vendor_extension_channel() const;
  ::f1x::aasdk::proto::data::VendorExtensionChannel* release_vendor_extension_channel();
  ::f1x::aasdk::proto::data::VendorExtensionChannel* mutable_vendor_extension_channel();
  void set_allocated_vendor_extension_channel(::f1x::aasdk::proto::data::VendorExtensionChannel* vendor_extension_channel);

  // required uint32 channel_id = 1;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.data.ChannelDescriptor)
 private:
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_sensor_channel();
  void clear_has_sensor_channel();
  void set_has_av_channel();
  void clear_has_av_channel();
  void set_has_input_channel();
  void clear_has_input_channel();
  void set_has_av_input_channel();
  void clear_has_av_input_channel();
  void set_has_navigation_channel();
  void clear_has_navigation_channel();
  void set_has_media_infochannel();
  void clear_has_media_infochannel();
  void set_has_vendor_extension_channel();
  void clear_has_vendor_extension_channel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::f1x::aasdk::proto::data::SensorChannel* sensor_channel_;
  ::f1x::aasdk::proto::data::AVChannel* av_channel_;
  ::f1x::aasdk::proto::data::InputChannel* input_channel_;
  ::f1x::aasdk::proto::data::AVInputChannel* av_input_channel_;
  ::f1x::aasdk::proto::data::NavigationChannel* navigation_channel_;
  ::f1x::aasdk::proto::data::MediaInfoChannel* media_infochannel_;
  ::f1x::aasdk::proto::data::VendorExtensionChannel* vendor_extension_channel_;
  ::google::protobuf::uint32 channel_id_;
  friend struct ::protobuf_ChannelDescriptorData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelDescriptor

// required uint32 channel_id = 1;
inline bool ChannelDescriptor::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChannelDescriptor::set_has_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChannelDescriptor::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChannelDescriptor::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 ChannelDescriptor::channel_id() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.ChannelDescriptor.channel_id)
  return channel_id_;
}
inline void ChannelDescriptor::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.ChannelDescriptor.channel_id)
}

// optional .f1x.aasdk.proto.data.SensorChannel sensor_channel = 2;
inline bool ChannelDescriptor::has_sensor_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelDescriptor::set_has_sensor_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelDescriptor::clear_has_sensor_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::f1x::aasdk::proto::data::SensorChannel& ChannelDescriptor::_internal_sensor_channel() const {
  return *sensor_channel_;
}
inline const ::f1x::aasdk::proto::data::SensorChannel& ChannelDescriptor::sensor_channel() const {
  const ::f1x::aasdk::proto::data::SensorChannel* p = sensor_channel_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.ChannelDescriptor.sensor_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::SensorChannel*>(
      &::f1x::aasdk::proto::data::_SensorChannel_default_instance_);
}
inline ::f1x::aasdk::proto::data::SensorChannel* ChannelDescriptor::release_sensor_channel() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.ChannelDescriptor.sensor_channel)
  clear_has_sensor_channel();
  ::f1x::aasdk::proto::data::SensorChannel* temp = sensor_channel_;
  sensor_channel_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::SensorChannel* ChannelDescriptor::mutable_sensor_channel() {
  set_has_sensor_channel();
  if (sensor_channel_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::SensorChannel>(GetArenaNoVirtual());
    sensor_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.ChannelDescriptor.sensor_channel)
  return sensor_channel_;
}
inline void ChannelDescriptor::set_allocated_sensor_channel(::f1x::aasdk::proto::data::SensorChannel* sensor_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sensor_channel_);
  }
  if (sensor_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensor_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_channel, submessage_arena);
    }
    set_has_sensor_channel();
  } else {
    clear_has_sensor_channel();
  }
  sensor_channel_ = sensor_channel;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.ChannelDescriptor.sensor_channel)
}

// optional .f1x.aasdk.proto.data.AVChannel av_channel = 3;
inline bool ChannelDescriptor::has_av_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelDescriptor::set_has_av_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelDescriptor::clear_has_av_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::f1x::aasdk::proto::data::AVChannel& ChannelDescriptor::_internal_av_channel() const {
  return *av_channel_;
}
inline const ::f1x::aasdk::proto::data::AVChannel& ChannelDescriptor::av_channel() const {
  const ::f1x::aasdk::proto::data::AVChannel* p = av_channel_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.ChannelDescriptor.av_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::AVChannel*>(
      &::f1x::aasdk::proto::data::_AVChannel_default_instance_);
}
inline ::f1x::aasdk::proto::data::AVChannel* ChannelDescriptor::release_av_channel() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.ChannelDescriptor.av_channel)
  clear_has_av_channel();
  ::f1x::aasdk::proto::data::AVChannel* temp = av_channel_;
  av_channel_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::AVChannel* ChannelDescriptor::mutable_av_channel() {
  set_has_av_channel();
  if (av_channel_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::AVChannel>(GetArenaNoVirtual());
    av_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.ChannelDescriptor.av_channel)
  return av_channel_;
}
inline void ChannelDescriptor::set_allocated_av_channel(::f1x::aasdk::proto::data::AVChannel* av_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(av_channel_);
  }
  if (av_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      av_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, av_channel, submessage_arena);
    }
    set_has_av_channel();
  } else {
    clear_has_av_channel();
  }
  av_channel_ = av_channel;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.ChannelDescriptor.av_channel)
}

// optional .f1x.aasdk.proto.data.InputChannel input_channel = 4;
inline bool ChannelDescriptor::has_input_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelDescriptor::set_has_input_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelDescriptor::clear_has_input_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::f1x::aasdk::proto::data::InputChannel& ChannelDescriptor::_internal_input_channel() const {
  return *input_channel_;
}
inline const ::f1x::aasdk::proto::data::InputChannel& ChannelDescriptor::input_channel() const {
  const ::f1x::aasdk::proto::data::InputChannel* p = input_channel_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.ChannelDescriptor.input_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::InputChannel*>(
      &::f1x::aasdk::proto::data::_InputChannel_default_instance_);
}
inline ::f1x::aasdk::proto::data::InputChannel* ChannelDescriptor::release_input_channel() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.ChannelDescriptor.input_channel)
  clear_has_input_channel();
  ::f1x::aasdk::proto::data::InputChannel* temp = input_channel_;
  input_channel_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::InputChannel* ChannelDescriptor::mutable_input_channel() {
  set_has_input_channel();
  if (input_channel_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::InputChannel>(GetArenaNoVirtual());
    input_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.ChannelDescriptor.input_channel)
  return input_channel_;
}
inline void ChannelDescriptor::set_allocated_input_channel(::f1x::aasdk::proto::data::InputChannel* input_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(input_channel_);
  }
  if (input_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_channel, submessage_arena);
    }
    set_has_input_channel();
  } else {
    clear_has_input_channel();
  }
  input_channel_ = input_channel;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.ChannelDescriptor.input_channel)
}

// optional .f1x.aasdk.proto.data.AVInputChannel av_input_channel = 5;
inline bool ChannelDescriptor::has_av_input_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChannelDescriptor::set_has_av_input_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChannelDescriptor::clear_has_av_input_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::f1x::aasdk::proto::data::AVInputChannel& ChannelDescriptor::_internal_av_input_channel() const {
  return *av_input_channel_;
}
inline const ::f1x::aasdk::proto::data::AVInputChannel& ChannelDescriptor::av_input_channel() const {
  const ::f1x::aasdk::proto::data::AVInputChannel* p = av_input_channel_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.ChannelDescriptor.av_input_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::AVInputChannel*>(
      &::f1x::aasdk::proto::data::_AVInputChannel_default_instance_);
}
inline ::f1x::aasdk::proto::data::AVInputChannel* ChannelDescriptor::release_av_input_channel() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.ChannelDescriptor.av_input_channel)
  clear_has_av_input_channel();
  ::f1x::aasdk::proto::data::AVInputChannel* temp = av_input_channel_;
  av_input_channel_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::AVInputChannel* ChannelDescriptor::mutable_av_input_channel() {
  set_has_av_input_channel();
  if (av_input_channel_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::AVInputChannel>(GetArenaNoVirtual());
    av_input_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.ChannelDescriptor.av_input_channel)
  return av_input_channel_;
}
inline void ChannelDescriptor::set_allocated_av_input_channel(::f1x::aasdk::proto::data::AVInputChannel* av_input_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(av_input_channel_);
  }
  if (av_input_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      av_input_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, av_input_channel, submessage_arena);
    }
    set_has_av_input_channel();
  } else {
    clear_has_av_input_channel();
  }
  av_input_channel_ = av_input_channel;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.ChannelDescriptor.av_input_channel)
}

// optional .f1x.aasdk.proto.data.NavigationChannel navigation_channel = 8;
inline bool ChannelDescriptor::has_navigation_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChannelDescriptor::set_has_navigation_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChannelDescriptor::clear_has_navigation_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::f1x::aasdk::proto::data::NavigationChannel& ChannelDescriptor::_internal_navigation_channel() const {
  return *navigation_channel_;
}
inline const ::f1x::aasdk::proto::data::NavigationChannel& ChannelDescriptor::navigation_channel() const {
  const ::f1x::aasdk::proto::data::NavigationChannel* p = navigation_channel_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.ChannelDescriptor.navigation_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::NavigationChannel*>(
      &::f1x::aasdk::proto::data::_NavigationChannel_default_instance_);
}
inline ::f1x::aasdk::proto::data::NavigationChannel* ChannelDescriptor::release_navigation_channel() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.ChannelDescriptor.navigation_channel)
  clear_has_navigation_channel();
  ::f1x::aasdk::proto::data::NavigationChannel* temp = navigation_channel_;
  navigation_channel_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::NavigationChannel* ChannelDescriptor::mutable_navigation_channel() {
  set_has_navigation_channel();
  if (navigation_channel_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::NavigationChannel>(GetArenaNoVirtual());
    navigation_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.ChannelDescriptor.navigation_channel)
  return navigation_channel_;
}
inline void ChannelDescriptor::set_allocated_navigation_channel(::f1x::aasdk::proto::data::NavigationChannel* navigation_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(navigation_channel_);
  }
  if (navigation_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      navigation_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, navigation_channel, submessage_arena);
    }
    set_has_navigation_channel();
  } else {
    clear_has_navigation_channel();
  }
  navigation_channel_ = navigation_channel;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.ChannelDescriptor.navigation_channel)
}

// optional .f1x.aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
inline bool ChannelDescriptor::has_media_infochannel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChannelDescriptor::set_has_media_infochannel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChannelDescriptor::clear_has_media_infochannel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::f1x::aasdk::proto::data::MediaInfoChannel& ChannelDescriptor::_internal_media_infochannel() const {
  return *media_infochannel_;
}
inline const ::f1x::aasdk::proto::data::MediaInfoChannel& ChannelDescriptor::media_infochannel() const {
  const ::f1x::aasdk::proto::data::MediaInfoChannel* p = media_infochannel_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.ChannelDescriptor.media_infoChannel)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::MediaInfoChannel*>(
      &::f1x::aasdk::proto::data::_MediaInfoChannel_default_instance_);
}
inline ::f1x::aasdk::proto::data::MediaInfoChannel* ChannelDescriptor::release_media_infochannel() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.ChannelDescriptor.media_infoChannel)
  clear_has_media_infochannel();
  ::f1x::aasdk::proto::data::MediaInfoChannel* temp = media_infochannel_;
  media_infochannel_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::MediaInfoChannel* ChannelDescriptor::mutable_media_infochannel() {
  set_has_media_infochannel();
  if (media_infochannel_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::MediaInfoChannel>(GetArenaNoVirtual());
    media_infochannel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.ChannelDescriptor.media_infoChannel)
  return media_infochannel_;
}
inline void ChannelDescriptor::set_allocated_media_infochannel(::f1x::aasdk::proto::data::MediaInfoChannel* media_infochannel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(media_infochannel_);
  }
  if (media_infochannel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_infochannel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_infochannel, submessage_arena);
    }
    set_has_media_infochannel();
  } else {
    clear_has_media_infochannel();
  }
  media_infochannel_ = media_infochannel;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.ChannelDescriptor.media_infoChannel)
}

// optional .f1x.aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
inline bool ChannelDescriptor::has_vendor_extension_channel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChannelDescriptor::set_has_vendor_extension_channel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChannelDescriptor::clear_has_vendor_extension_channel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::f1x::aasdk::proto::data::VendorExtensionChannel& ChannelDescriptor::_internal_vendor_extension_channel() const {
  return *vendor_extension_channel_;
}
inline const ::f1x::aasdk::proto::data::VendorExtensionChannel& ChannelDescriptor::vendor_extension_channel() const {
  const ::f1x::aasdk::proto::data::VendorExtensionChannel* p = vendor_extension_channel_;
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
  return p != NULL ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::VendorExtensionChannel*>(
      &::f1x::aasdk::proto::data::_VendorExtensionChannel_default_instance_);
}
inline ::f1x::aasdk::proto::data::VendorExtensionChannel* ChannelDescriptor::release_vendor_extension_channel() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
  clear_has_vendor_extension_channel();
  ::f1x::aasdk::proto::data::VendorExtensionChannel* temp = vendor_extension_channel_;
  vendor_extension_channel_ = NULL;
  return temp;
}
inline ::f1x::aasdk::proto::data::VendorExtensionChannel* ChannelDescriptor::mutable_vendor_extension_channel() {
  set_has_vendor_extension_channel();
  if (vendor_extension_channel_ == NULL) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::VendorExtensionChannel>(GetArenaNoVirtual());
    vendor_extension_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
  return vendor_extension_channel_;
}
inline void ChannelDescriptor::set_allocated_vendor_extension_channel(::f1x::aasdk::proto::data::VendorExtensionChannel* vendor_extension_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vendor_extension_channel_);
  }
  if (vendor_extension_channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vendor_extension_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vendor_extension_channel, submessage_arena);
    }
    set_has_vendor_extension_channel();
  } else {
    clear_has_vendor_extension_channel();
  }
  vendor_extension_channel_ = vendor_extension_channel;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ChannelDescriptorData_2eproto
