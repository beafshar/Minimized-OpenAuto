// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChannelDescriptorData.proto

#include "ChannelDescriptorData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_AVChannelData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AVChannelData_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AVChannel;
}  // namespace protobuf_AVChannelData_2eproto
namespace protobuf_AVInputChannelData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AVInputChannelData_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AVInputChannel;
}  // namespace protobuf_AVInputChannelData_2eproto
namespace protobuf_InputChannelData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_InputChannelData_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InputChannel;
}  // namespace protobuf_InputChannelData_2eproto
namespace protobuf_MediaChannelData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MediaChannelData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MediaInfoChannel;
}  // namespace protobuf_MediaChannelData_2eproto
namespace protobuf_NavigationChannelData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NavigationChannelData_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NavigationChannel;
}  // namespace protobuf_NavigationChannelData_2eproto
namespace protobuf_SensorChannelData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_SensorChannelData_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorChannel;
}  // namespace protobuf_SensorChannelData_2eproto
namespace protobuf_VendorExtensionChannelData_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_VendorExtensionChannelData_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VendorExtensionChannel;
}  // namespace protobuf_VendorExtensionChannelData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class ChannelDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelDescriptor>
      _instance;
} _ChannelDescriptor_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace protobuf_ChannelDescriptorData_2eproto {
static void InitDefaultsChannelDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_;
    new (ptr) ::f1x::aasdk::proto::data::ChannelDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::data::ChannelDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_ChannelDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsChannelDescriptor}, {
      &protobuf_SensorChannelData_2eproto::scc_info_SensorChannel.base,
      &protobuf_AVChannelData_2eproto::scc_info_AVChannel.base,
      &protobuf_InputChannelData_2eproto::scc_info_InputChannel.base,
      &protobuf_AVInputChannelData_2eproto::scc_info_AVInputChannel.base,
      &protobuf_NavigationChannelData_2eproto::scc_info_NavigationChannel.base,
      &protobuf_MediaChannelData_2eproto::scc_info_MediaInfoChannel.base,
      &protobuf_VendorExtensionChannelData_2eproto::scc_info_VendorExtensionChannel.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ChannelDescriptor.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, sensor_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, av_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, input_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, av_input_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, navigation_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, media_infochannel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::f1x::aasdk::proto::data::ChannelDescriptor, vendor_extension_channel_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::f1x::aasdk::proto::data::ChannelDescriptor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ChannelDescriptorData.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033ChannelDescriptorData.proto\022\024f1x.aasdk"
      ".proto.data\032\027SensorChannelData.proto\032\023AV"
      "ChannelData.proto\032\026InputChannelData.prot"
      "o\032\030AVInputChannelData.proto\032\033NavigationC"
      "hannelData.proto\032 VendorExtensionChannel"
      "Data.proto\032\026MediaChannelData.proto\"\354\003\n\021C"
      "hannelDescriptor\022\022\n\nchannel_id\030\001 \002(\r\022;\n\016"
      "sensor_channel\030\002 \001(\0132#.f1x.aasdk.proto.d"
      "ata.SensorChannel\0223\n\nav_channel\030\003 \001(\0132\037."
      "f1x.aasdk.proto.data.AVChannel\0229\n\rinput_"
      "channel\030\004 \001(\0132\".f1x.aasdk.proto.data.Inp"
      "utChannel\022>\n\020av_input_channel\030\005 \001(\0132$.f1"
      "x.aasdk.proto.data.AVInputChannel\022C\n\022nav"
      "igation_channel\030\010 \001(\0132\'.f1x.aasdk.proto."
      "data.NavigationChannel\022A\n\021media_infoChan"
      "nel\030\t \001(\0132&.f1x.aasdk.proto.data.MediaIn"
      "foChannel\022N\n\030vendor_extension_channel\030\014 "
      "\001(\0132,.f1x.aasdk.proto.data.VendorExtensi"
      "onChannelB\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChannelDescriptorData.proto", &protobuf_RegisterTypes);
  ::protobuf_SensorChannelData_2eproto::AddDescriptors();
  ::protobuf_AVChannelData_2eproto::AddDescriptors();
  ::protobuf_InputChannelData_2eproto::AddDescriptors();
  ::protobuf_AVInputChannelData_2eproto::AddDescriptors();
  ::protobuf_NavigationChannelData_2eproto::AddDescriptors();
  ::protobuf_VendorExtensionChannelData_2eproto::AddDescriptors();
  ::protobuf_MediaChannelData_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ChannelDescriptorData_2eproto
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

void ChannelDescriptor::InitAsDefaultInstance() {
  ::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_._instance.get_mutable()->sensor_channel_ = const_cast< ::f1x::aasdk::proto::data::SensorChannel*>(
      ::f1x::aasdk::proto::data::SensorChannel::internal_default_instance());
  ::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_._instance.get_mutable()->av_channel_ = const_cast< ::f1x::aasdk::proto::data::AVChannel*>(
      ::f1x::aasdk::proto::data::AVChannel::internal_default_instance());
  ::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_._instance.get_mutable()->input_channel_ = const_cast< ::f1x::aasdk::proto::data::InputChannel*>(
      ::f1x::aasdk::proto::data::InputChannel::internal_default_instance());
  ::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_._instance.get_mutable()->av_input_channel_ = const_cast< ::f1x::aasdk::proto::data::AVInputChannel*>(
      ::f1x::aasdk::proto::data::AVInputChannel::internal_default_instance());
  ::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_._instance.get_mutable()->navigation_channel_ = const_cast< ::f1x::aasdk::proto::data::NavigationChannel*>(
      ::f1x::aasdk::proto::data::NavigationChannel::internal_default_instance());
  ::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_._instance.get_mutable()->media_infochannel_ = const_cast< ::f1x::aasdk::proto::data::MediaInfoChannel*>(
      ::f1x::aasdk::proto::data::MediaInfoChannel::internal_default_instance());
  ::f1x::aasdk::proto::data::_ChannelDescriptor_default_instance_._instance.get_mutable()->vendor_extension_channel_ = const_cast< ::f1x::aasdk::proto::data::VendorExtensionChannel*>(
      ::f1x::aasdk::proto::data::VendorExtensionChannel::internal_default_instance());
}
void ChannelDescriptor::clear_sensor_channel() {
  if (sensor_channel_ != NULL) sensor_channel_->Clear();
  clear_has_sensor_channel();
}
void ChannelDescriptor::clear_av_channel() {
  if (av_channel_ != NULL) av_channel_->Clear();
  clear_has_av_channel();
}
void ChannelDescriptor::clear_input_channel() {
  if (input_channel_ != NULL) input_channel_->Clear();
  clear_has_input_channel();
}
void ChannelDescriptor::clear_av_input_channel() {
  if (av_input_channel_ != NULL) av_input_channel_->Clear();
  clear_has_av_input_channel();
}
void ChannelDescriptor::clear_navigation_channel() {
  if (navigation_channel_ != NULL) navigation_channel_->Clear();
  clear_has_navigation_channel();
}
void ChannelDescriptor::clear_media_infochannel() {
  if (media_infochannel_ != NULL) media_infochannel_->Clear();
  clear_has_media_infochannel();
}
void ChannelDescriptor::clear_vendor_extension_channel() {
  if (vendor_extension_channel_ != NULL) vendor_extension_channel_->Clear();
  clear_has_vendor_extension_channel();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelDescriptor::kChannelIdFieldNumber;
const int ChannelDescriptor::kSensorChannelFieldNumber;
const int ChannelDescriptor::kAvChannelFieldNumber;
const int ChannelDescriptor::kInputChannelFieldNumber;
const int ChannelDescriptor::kAvInputChannelFieldNumber;
const int ChannelDescriptor::kNavigationChannelFieldNumber;
const int ChannelDescriptor::kMediaInfoChannelFieldNumber;
const int ChannelDescriptor::kVendorExtensionChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelDescriptor::ChannelDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ChannelDescriptorData_2eproto::scc_info_ChannelDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:f1x.aasdk.proto.data.ChannelDescriptor)
}
ChannelDescriptor::ChannelDescriptor(const ChannelDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_channel()) {
    sensor_channel_ = new ::f1x::aasdk::proto::data::SensorChannel(*from.sensor_channel_);
  } else {
    sensor_channel_ = NULL;
  }
  if (from.has_av_channel()) {
    av_channel_ = new ::f1x::aasdk::proto::data::AVChannel(*from.av_channel_);
  } else {
    av_channel_ = NULL;
  }
  if (from.has_input_channel()) {
    input_channel_ = new ::f1x::aasdk::proto::data::InputChannel(*from.input_channel_);
  } else {
    input_channel_ = NULL;
  }
  if (from.has_av_input_channel()) {
    av_input_channel_ = new ::f1x::aasdk::proto::data::AVInputChannel(*from.av_input_channel_);
  } else {
    av_input_channel_ = NULL;
  }
  if (from.has_navigation_channel()) {
    navigation_channel_ = new ::f1x::aasdk::proto::data::NavigationChannel(*from.navigation_channel_);
  } else {
    navigation_channel_ = NULL;
  }
  if (from.has_media_infochannel()) {
    media_infochannel_ = new ::f1x::aasdk::proto::data::MediaInfoChannel(*from.media_infochannel_);
  } else {
    media_infochannel_ = NULL;
  }
  if (from.has_vendor_extension_channel()) {
    vendor_extension_channel_ = new ::f1x::aasdk::proto::data::VendorExtensionChannel(*from.vendor_extension_channel_);
  } else {
    vendor_extension_channel_ = NULL;
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.data.ChannelDescriptor)
}

void ChannelDescriptor::SharedCtor() {
  ::memset(&sensor_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&sensor_channel_)) + sizeof(channel_id_));
}

ChannelDescriptor::~ChannelDescriptor() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.data.ChannelDescriptor)
  SharedDtor();
}

void ChannelDescriptor::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_channel_;
  if (this != internal_default_instance()) delete av_channel_;
  if (this != internal_default_instance()) delete input_channel_;
  if (this != internal_default_instance()) delete av_input_channel_;
  if (this != internal_default_instance()) delete navigation_channel_;
  if (this != internal_default_instance()) delete media_infochannel_;
  if (this != internal_default_instance()) delete vendor_extension_channel_;
}

void ChannelDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChannelDescriptor::descriptor() {
  ::protobuf_ChannelDescriptorData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ChannelDescriptorData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelDescriptor& ChannelDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ChannelDescriptorData_2eproto::scc_info_ChannelDescriptor.base);
  return *internal_default_instance();
}


void ChannelDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.data.ChannelDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_channel_ != NULL);
      sensor_channel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(av_channel_ != NULL);
      av_channel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(input_channel_ != NULL);
      input_channel_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(av_input_channel_ != NULL);
      av_input_channel_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(navigation_channel_ != NULL);
      navigation_channel_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(media_infochannel_ != NULL);
      media_infochannel_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(vendor_extension_channel_ != NULL);
      vendor_extension_channel_->Clear();
    }
  }
  channel_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f1x.aasdk.proto.data.ChannelDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.SensorChannel sensor_channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.AVChannel av_channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_av_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.InputChannel input_channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.AVInputChannel av_input_channel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_av_input_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.NavigationChannel navigation_channel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navigation_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media_infochannel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .f1x.aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vendor_extension_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f1x.aasdk.proto.data.ChannelDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f1x.aasdk.proto.data.ChannelDescriptor)
  return false;
#undef DO_
}

void ChannelDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f1x.aasdk.proto.data.ChannelDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional .f1x.aasdk.proto.data.SensorChannel sensor_channel = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sensor_channel(), output);
  }

  // optional .f1x.aasdk.proto.data.AVChannel av_channel = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_av_channel(), output);
  }

  // optional .f1x.aasdk.proto.data.InputChannel input_channel = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_input_channel(), output);
  }

  // optional .f1x.aasdk.proto.data.AVInputChannel av_input_channel = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_av_input_channel(), output);
  }

  // optional .f1x.aasdk.proto.data.NavigationChannel navigation_channel = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_navigation_channel(), output);
  }

  // optional .f1x.aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_media_infochannel(), output);
  }

  // optional .f1x.aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_vendor_extension_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f1x.aasdk.proto.data.ChannelDescriptor)
}

::google::protobuf::uint8* ChannelDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.data.ChannelDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional .f1x.aasdk.proto.data.SensorChannel sensor_channel = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sensor_channel(), deterministic, target);
  }

  // optional .f1x.aasdk.proto.data.AVChannel av_channel = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_av_channel(), deterministic, target);
  }

  // optional .f1x.aasdk.proto.data.InputChannel input_channel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_input_channel(), deterministic, target);
  }

  // optional .f1x.aasdk.proto.data.AVInputChannel av_input_channel = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_av_input_channel(), deterministic, target);
  }

  // optional .f1x.aasdk.proto.data.NavigationChannel navigation_channel = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_navigation_channel(), deterministic, target);
  }

  // optional .f1x.aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_media_infochannel(), deterministic, target);
  }

  // optional .f1x.aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_vendor_extension_channel(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.data.ChannelDescriptor)
  return target;
}

size_t ChannelDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.data.ChannelDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .f1x.aasdk.proto.data.SensorChannel sensor_channel = 2;
    if (has_sensor_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_channel_);
    }

    // optional .f1x.aasdk.proto.data.AVChannel av_channel = 3;
    if (has_av_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *av_channel_);
    }

    // optional .f1x.aasdk.proto.data.InputChannel input_channel = 4;
    if (has_input_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *input_channel_);
    }

    // optional .f1x.aasdk.proto.data.AVInputChannel av_input_channel = 5;
    if (has_av_input_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *av_input_channel_);
    }

    // optional .f1x.aasdk.proto.data.NavigationChannel navigation_channel = 8;
    if (has_navigation_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *navigation_channel_);
    }

    // optional .f1x.aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
    if (has_media_infochannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *media_infochannel_);
    }

    // optional .f1x.aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
    if (has_vendor_extension_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vendor_extension_channel_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.data.ChannelDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.data.ChannelDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.data.ChannelDescriptor)
    MergeFrom(*source);
  }
}

void ChannelDescriptor::MergeFrom(const ChannelDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.data.ChannelDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sensor_channel()->::f1x::aasdk::proto::data::SensorChannel::MergeFrom(from.sensor_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_av_channel()->::f1x::aasdk::proto::data::AVChannel::MergeFrom(from.av_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_input_channel()->::f1x::aasdk::proto::data::InputChannel::MergeFrom(from.input_channel());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_av_input_channel()->::f1x::aasdk::proto::data::AVInputChannel::MergeFrom(from.av_input_channel());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_navigation_channel()->::f1x::aasdk::proto::data::NavigationChannel::MergeFrom(from.navigation_channel());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_media_infochannel()->::f1x::aasdk::proto::data::MediaInfoChannel::MergeFrom(from.media_infochannel());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_vendor_extension_channel()->::f1x::aasdk::proto::data::VendorExtensionChannel::MergeFrom(from.vendor_extension_channel());
    }
    if (cached_has_bits & 0x00000080u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.data.ChannelDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor::CopyFrom(const ChannelDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.data.ChannelDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (has_sensor_channel()) {
    if (!this->sensor_channel_->IsInitialized()) return false;
  }
  if (has_av_channel()) {
    if (!this->av_channel_->IsInitialized()) return false;
  }
  if (has_input_channel()) {
    if (!this->input_channel_->IsInitialized()) return false;
  }
  if (has_av_input_channel()) {
    if (!this->av_input_channel_->IsInitialized()) return false;
  }
  if (has_navigation_channel()) {
    if (!this->navigation_channel_->IsInitialized()) return false;
  }
  if (has_vendor_extension_channel()) {
    if (!this->vendor_extension_channel_->IsInitialized()) return false;
  }
  return true;
}

void ChannelDescriptor::Swap(ChannelDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelDescriptor::InternalSwap(ChannelDescriptor* other) {
  using std::swap;
  swap(sensor_channel_, other->sensor_channel_);
  swap(av_channel_, other->av_channel_);
  swap(input_channel_, other->input_channel_);
  swap(av_input_channel_, other->av_input_channel_);
  swap(navigation_channel_, other->navigation_channel_);
  swap(media_infochannel_, other->media_infochannel_);
  swap(vendor_extension_channel_, other->vendor_extension_channel_);
  swap(channel_id_, other->channel_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChannelDescriptor::GetMetadata() const {
  protobuf_ChannelDescriptorData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ChannelDescriptorData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::f1x::aasdk::proto::data::ChannelDescriptor* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::data::ChannelDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::f1x::aasdk::proto::data::ChannelDescriptor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
